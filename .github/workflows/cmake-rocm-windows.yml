name: Build Koboldcpp-ROCm Windows

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag of koboldcpp-rocm to build: v1.43.2-ROCm'
        default: 'latest-win-ROCm'
        required: false
        type: string
  workflow_call:
    inputs:
      version:
        description: 'Version tag of koboldcpp-rocm to build: v1.43.2-ROCm'
        default: 'latest-win-ROCm'
        required: false
        type: string

permissions:
  contents: write

jobs:
  build_libs:
    name: Build ROCm Lib
    runs-on: windows-latest
    defaults:
      run:
        shell: pwsh

    steps:
      - uses: actions/checkout@v3
        with:
          repository: 'YellowRoseCx/koboldcpp-rocm'
          ref: main # ${{ inputs.version }}
          submodules: 'recursive'
          
      - name: Install ROCm SDK
        run: |
          curl -LO https://download.amd.com/developer/eula/rocm-hub/AMD-Software-PRO-Edition-23.Q3-Win10-Win11-For-HIP.exe
          Start-Process 'AMD-Software-PRO-Edition-23.Q3-Win10-Win11-For-HIP.exe' -ArgumentList '-install' -NoNewWindow -Wait
          echo "C:\Program Files\AMD\ROCm\5.5\bin" >> $env:GITHUB_PATH
          echo 'ROCM_PATH=C:\Program Files\AMD\ROCm\5.5' >> $env:GITHUB_ENV
          echo 'HIP_PATH=C:\Program Files\AMD\ROCm\5.5' >> $env:GITHUB_ENV
          echo "ROCM_VERSION=5.5.1" >> $env:GITHUB_ENV
          
      - uses: actions/setup-python@v3
        with:
          python-version: "3.10"
          
      - name: Install Dependencies
        run: |
          python -m pip install cmake ninja
          
      - name: Install PyInstaller
        run: pip install pyinstaller
        
      - name: Build Lib
        run: |
          $env:CC = 'C:\Program Files\AMD\ROCm\5.5\bin\clang.exe'
          $env:CXX = 'C:\Program Files\AMD\ROCm\5.5\bin\clang++.exe'
          $env:CMAKE_PREFIX_PATH = 'C:\Program Files\AMD\ROCm\5.5'
          $env:VERBOSE = '1'
          Set-Location 'D:\a\koboldcpp-rocm\koboldcpp-rocm'
          mkdir 'build'
          Set-Location 'D:\a\koboldcpp-rocm\koboldcpp-rocm\build'
          Get-Location
          cmake .. -G "Ninja" -DCMAKE_BUILD_TYPE=Release -DLLAMA_HIPBLAS=ON -DCMAKE_C_COMPILER="C:/Program Files/AMD/ROCm/5.5/bin/clang.exe" -DCMAKE_CXX_COMPILER="C:/Program Files/AMD/ROCm/5.5/bin/clang++.exe" -DAMDGPU_TARGETS="gfx803;gfx900;gfx906;gfx908;gfx90a;gfx1010;gfx1030;gfx1031;gfx1032;gfx1100;gfx1101;gfx1102"
          cmake --build . -j2
        
      - name: Copy ROCm DLLs and Run PyInstaller
        run: |
          Set-Location 'D:\a\koboldcpp-rocm\koboldcpp-rocm'
          Get-Location
          copy "C:\Program Files\AMD\ROCm\5.5\bin\hipblas.dll" .\
          copy "C:\Program Files\AMD\ROCm\5.5\bin\rocblas.dll" .\
          robocopy "C:\Program Files\AMD\ROCm\5.5\bin\rocblas" .\rocblas /MIR
          pip install customtkinter
          PyInstaller --noconfirm --onefile --collect-all customtkinter --clean --console --icon ".\niko.ico" --add-data "./klite.embd;." --add-data "D:\a\koboldcpp-rocm\koboldcpp-rocm\build\bin\koboldcpp_hipblas.dll;." --add-data "./hipblas.dll;." --add-data "./rocblas.dll;." --add-data "./rwkv_vocab.embd;." --add-data "./rwkv_world_vocab.embd;." --add-data "./rocblas;." --add-data "C:/Windows/System32/msvcp140.dll;." --add-data "C:/Windows/System32/vcruntime140_1.dll;." "./koboldcpp.py" -n "koboldcpp_rocm_only.exe"
        
      - uses: actions/upload-artifact@v3
        with:
          name: 'win-kcpp-rocm-dll'
          path: D:\a\koboldcpp-rocm\koboldcpp-rocm\build\bin\koboldcpp_hipblas.dll
          
      - uses: actions/upload-artifact@v3
        with:
          name: 'win-kcpp-rocm-exe'
          path: D:\a\koboldcpp-rocm\koboldcpp-rocm\dists\koboldcpp_rocm_only.exe

      - name: Upload files to a GitHub release
        id: upload-release
        uses: svenstaro/upload-release-action@2.7.0
        continue-on-error: true
        with:
          file: D:\a\koboldcpp-rocm\koboldcpp-rocm\dists\*.exe
          tag: ${{ github.ref }}
          file_glob: false
          make_latest: true
          overwrite: false
 
#          Copy-Item 'D:\a\koboldcpp-rocm\koboldcpp-rocm\build\bin\koboldcpp_hipblas.dll' '..\..\build'
#  build_wheel:
#    name: Build ROCm 
#    runs-on: windows-latest
#    needs: build_libs
#    strategy:
#      matrix:
#        pyver: ["3.8", "3.9", "3.10", "3.11"]
#    defaults:
#      run:
#        shell: pwsh
#    env:
#      PCKGVER: ${{ inputs.version }}

#    steps:
#      - uses: actions/checkout@v3
#        with:
#          repository: 'YellowRoseCx/koboldcpp-rocm'
#          ref: ${{ inputs.version }}
          
#      - uses: actions/download-artifact@v3
#        with:
#          name: 'win-rocm-lib'
#          path: ./koboldcpp-rocm
          
#      - uses: actions/setup-python@v3
#        with:
#          python-version: ${{ matrix.pyver }}
          
#      - name: Install Dependencies
#        run: |
#          python -m pip install build wheel cmake scikit-build ninja
        
#      - name: Build Wheel
#        run: |
#          $packageVersion = [version]$env:PCKGVER.TrimStart('v')
#          $setup = Get-Content 'setup.py' -raw
#          if ($packageVersion -lt [version]'0.1.78') {$newsetup = $setup.Replace("packages=[`"llama_cpp`", `"llama_cpp.server`"],","packages=[`"llama_cpp`", `"llama_cpp.server`"],`n    package_data={'llama_cpp': ['llama.dll']},")}
#          if ($packageVersion -gt [version]'0.1.77') {$newsetup = $setup.Replace('package_data={"llama_cpp": ["py.typed"]},','package_data={"llama_cpp": ["py.typed", "llama.dll"]},')}
#          New-Item 'setup.py' -itemType File -value $newsetup -force
#          python setup.py --skip-cmake bdist_wheel egg_info --tag-build=+rocm5.5.1
          
#      - name: Upload files to a GitHub release
#        id: upload-release
#        uses: svenstaro/upload-release-action@2.6.1
#        continue-on-error: true
#        with:
#          file: ./dist/*.whl
#          tag: rocm
#          file_glob: true
#          make_latest: false
#          overwrite: true
        
#      - uses: actions/upload-artifact@v3
#        if: steps.upload-release.outcome == 'failure'
#        with:
#          name: 'win-rocm-wheels'
#          path: ./dist/*.whl
